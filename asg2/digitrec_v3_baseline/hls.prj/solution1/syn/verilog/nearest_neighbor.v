// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="nearest_neighbor,hls_ip_2014_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.332875,HLS_SYN_LAT=1044001,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module nearest_neighbor (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V,
        nearest_V,
        nearest_V_ap_vld
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b000;
parameter    ap_ST_st2_fsm_1 = 3'b1;
parameter    ap_ST_st3_fsm_2 = 3'b10;
parameter    ap_ST_st4_fsm_3 = 3'b11;
parameter    ap_ST_st5_fsm_4 = 3'b100;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv15_0 = 15'b000000000000000;
parameter    ap_const_lv49_0 = 49'b0000000000000000000000000000000000000000000000000;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv49_7D0 = 49'b11111010000;
parameter    ap_const_lv11_7D0 = 11'b11111010000;
parameter    ap_const_lv11_1 = 11'b1;
parameter    ap_const_lv15_7D0 = 15'b11111010000;
parameter    ap_const_lv4_A = 4'b1010;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv6_31 = 6'b110001;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv49_1FFFFFFFFFFFF = 49'b1111111111111111111111111111111111111111111111111;
parameter    ap_const_lv49_1 = 49'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [48:0] input_V;
output  [3:0] nearest_V;
output   nearest_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg nearest_V_ap_vld;
reg   [2:0] ap_CS_fsm = 3'b000;
wire   [14:0] training_data_address0;
reg    training_data_ce0;
wire   [47:0] training_data_q0;
wire   [10:0] data_1_fu_166_p2;
reg   [10:0] data_1_reg_291;
wire   [14:0] next_mul_fu_172_p2;
reg   [14:0] next_mul_reg_296;
wire   [3:0] possible_result_fu_184_p2;
reg   [3:0] possible_result_reg_304;
wire   [0:0] exitcond_fu_178_p2;
wire   [48:0] r_V_fu_209_p2;
wire   [5:0] i_fu_221_p2;
wire   [48:0] diff_V_1_fu_239_p2;
wire   [0:0] exitcond_i_fu_215_p2;
wire   [48:0] counter_V_1_fu_251_p3;
reg   [10:0] data_reg_87;
reg   [3:0] val_assign_reg_99;
wire   [0:0] exitcond1_fu_160_p2;
reg   [14:0] phi_mul_reg_112;
reg   [48:0] p_i_reg_123;
reg   [48:0] p_1_i_reg_132;
reg   [5:0] i_i_reg_143;
wire   [63:0] tmp_fu_200_p1;
reg   [48:0] max_difference_V_1_fu_58;
wire   [48:0] max_difference_V_fu_266_p1;
wire   [0:0] tmp_4_fu_270_p2;
wire   [14:0] tmp_trn_cast_fu_190_p1;
wire   [14:0] training_data_addr2_fu_194_p2;
wire   [48:0] rhs_V_cast_fu_205_p1;
wire   [48:0] tmp_8_i_fu_233_p2;
wire   [0:0] tmp_7_i_fu_227_p2;
wire   [48:0] counter_V_fu_245_p2;
wire   [5:0] difference_V_fu_262_p1;
reg   [2:0] ap_NS_fsm;


nearest_neighbor_training_data #(
    .DataWidth( 48 ),
    .AddressRange( 20000 ),
    .AddressWidth( 15 ))
training_data_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( training_data_address0 ),
    .ce0( training_data_ce0 ),
    .q0( training_data_q0 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(exitcond_fu_178_p2 == ap_const_lv1_0))) begin
        data_reg_87 <= data_1_reg_291;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        data_reg_87 <= ap_const_lv11_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st5_fsm_4 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_i_fu_215_p2))) begin
        i_i_reg_143 <= i_fu_221_p2;
    end else if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        i_i_reg_143 <= ap_const_lv6_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st5_fsm_4 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_i_fu_215_p2) & ~(ap_const_lv1_0 == tmp_4_fu_270_p2))) begin
        max_difference_V_1_fu_58[0] <= max_difference_V_fu_266_p1[0];
        max_difference_V_1_fu_58[1] <= max_difference_V_fu_266_p1[1];
        max_difference_V_1_fu_58[2] <= max_difference_V_fu_266_p1[2];
        max_difference_V_1_fu_58[3] <= max_difference_V_fu_266_p1[3];
        max_difference_V_1_fu_58[4] <= max_difference_V_fu_266_p1[4];
        max_difference_V_1_fu_58[5] <= max_difference_V_fu_266_p1[5];
        max_difference_V_1_fu_58[6] <= max_difference_V_fu_266_p1[6];
        max_difference_V_1_fu_58[7] <= max_difference_V_fu_266_p1[7];
        max_difference_V_1_fu_58[8] <= max_difference_V_fu_266_p1[8];
        max_difference_V_1_fu_58[9] <= max_difference_V_fu_266_p1[9];
        max_difference_V_1_fu_58[10] <= max_difference_V_fu_266_p1[10];
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        max_difference_V_1_fu_58[0] <= 1'b0;
        max_difference_V_1_fu_58[1] <= 1'b0;
        max_difference_V_1_fu_58[2] <= 1'b0;
        max_difference_V_1_fu_58[3] <= 1'b0;
        max_difference_V_1_fu_58[4] <= 1'b1;
        max_difference_V_1_fu_58[5] <= 1'b0;
        max_difference_V_1_fu_58[6] <= 1'b1;
        max_difference_V_1_fu_58[7] <= 1'b1;
        max_difference_V_1_fu_58[8] <= 1'b1;
        max_difference_V_1_fu_58[9] <= 1'b1;
        max_difference_V_1_fu_58[10] <= 1'b1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st5_fsm_4 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_i_fu_215_p2))) begin
        p_1_i_reg_132 <= counter_V_1_fu_251_p3;
    end else if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        p_1_i_reg_132 <= ap_const_lv49_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st5_fsm_4 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_i_fu_215_p2))) begin
        p_i_reg_123 <= diff_V_1_fu_239_p2;
    end else if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        p_i_reg_123 <= r_V_fu_209_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_160_p2))) begin
        phi_mul_reg_112 <= ap_const_lv15_0;
    end else if (((ap_ST_st5_fsm_4 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_i_fu_215_p2))) begin
        phi_mul_reg_112 <= next_mul_reg_296;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_160_p2))) begin
        val_assign_reg_99 <= ap_const_lv4_0;
    end else if (((ap_ST_st5_fsm_4 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_i_fu_215_p2))) begin
        val_assign_reg_99 <= possible_result_reg_304;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        data_1_reg_291 <= data_1_fu_166_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        next_mul_reg_296 <= next_mul_fu_172_p2;
        possible_result_reg_304 <= possible_result_fu_184_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_160_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_160_p2))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_160_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_160_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// nearest_V_ap_vld assign process. ///
always @ (ap_CS_fsm or exitcond_i_fu_215_p2 or tmp_4_fu_270_p2)
begin
    if (((ap_ST_st5_fsm_4 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_i_fu_215_p2) & ~(ap_const_lv1_0 == tmp_4_fu_270_p2))) begin
        nearest_V_ap_vld = ap_const_logic_1;
    end else begin
        nearest_V_ap_vld = ap_const_logic_0;
    end
end

/// training_data_ce0 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        training_data_ce0 = ap_const_logic_1;
    end else begin
        training_data_ce0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond_fu_178_p2 or exitcond_i_fu_215_p2 or exitcond1_fu_160_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_lv1_0 == exitcond1_fu_160_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if ((exitcond_fu_178_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_i_fu_215_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign counter_V_1_fu_251_p3 = ((tmp_7_i_fu_227_p2)? p_1_i_reg_132: counter_V_fu_245_p2);
assign counter_V_fu_245_p2 = (p_1_i_reg_132 + ap_const_lv49_1);
assign data_1_fu_166_p2 = (data_reg_87 + ap_const_lv11_1);
assign diff_V_1_fu_239_p2 = (tmp_8_i_fu_233_p2 & p_i_reg_123);
assign difference_V_fu_262_p1 = p_1_i_reg_132[5:0];
assign exitcond1_fu_160_p2 = (data_reg_87 == ap_const_lv11_7D0? 1'b1: 1'b0);
assign exitcond_fu_178_p2 = (val_assign_reg_99 == ap_const_lv4_A? 1'b1: 1'b0);
assign exitcond_i_fu_215_p2 = (i_i_reg_143 == ap_const_lv6_31? 1'b1: 1'b0);
assign i_fu_221_p2 = (i_i_reg_143 + ap_const_lv6_1);
assign max_difference_V_fu_266_p1 = $unsigned(difference_V_fu_262_p1);
assign nearest_V = val_assign_reg_99;
assign next_mul_fu_172_p2 = (phi_mul_reg_112 + ap_const_lv15_7D0);
assign possible_result_fu_184_p2 = (val_assign_reg_99 + ap_const_lv4_1);
assign r_V_fu_209_p2 = (rhs_V_cast_fu_205_p1 ^ input_V);
assign rhs_V_cast_fu_205_p1 = $unsigned(training_data_q0);
assign tmp_4_fu_270_p2 = (max_difference_V_fu_266_p1 < max_difference_V_1_fu_58? 1'b1: 1'b0);
assign tmp_7_i_fu_227_p2 = (p_i_reg_123 == ap_const_lv49_0? 1'b1: 1'b0);
assign tmp_8_i_fu_233_p2 = (p_i_reg_123 + ap_const_lv49_1FFFFFFFFFFFF);
assign tmp_fu_200_p1 = $unsigned(training_data_addr2_fu_194_p2);
assign tmp_trn_cast_fu_190_p1 = $unsigned(data_reg_87);
assign training_data_addr2_fu_194_p2 = (phi_mul_reg_112 + tmp_trn_cast_fu_190_p1);
assign training_data_address0 = tmp_fu_200_p1;
always @ (posedge ap_clk)
begin
    max_difference_V_1_fu_58[48:11] <= 38'b00000000000000000000000000000000000000;
end



endmodule //nearest_neighbor

