// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "nearest_neighbor.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic nearest_neighbor::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic nearest_neighbor::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> nearest_neighbor::ap_ST_st1_fsm_0 = "000";
const sc_lv<3> nearest_neighbor::ap_ST_st2_fsm_1 = "1";
const sc_lv<3> nearest_neighbor::ap_ST_st3_fsm_2 = "10";
const sc_lv<3> nearest_neighbor::ap_ST_st4_fsm_3 = "11";
const sc_lv<3> nearest_neighbor::ap_ST_st5_fsm_4 = "100";
const sc_lv<1> nearest_neighbor::ap_const_lv1_0 = "0";
const sc_lv<11> nearest_neighbor::ap_const_lv11_0 = "00000000000";
const sc_lv<4> nearest_neighbor::ap_const_lv4_0 = "0000";
const sc_lv<15> nearest_neighbor::ap_const_lv15_0 = "000000000000000";
const sc_lv<49> nearest_neighbor::ap_const_lv49_0 = "0000000000000000000000000000000000000000000000000";
const sc_lv<6> nearest_neighbor::ap_const_lv6_0 = "000000";
const sc_lv<49> nearest_neighbor::ap_const_lv49_7D0 = "11111010000";
const sc_lv<11> nearest_neighbor::ap_const_lv11_7D0 = "11111010000";
const sc_lv<11> nearest_neighbor::ap_const_lv11_1 = "1";
const sc_lv<15> nearest_neighbor::ap_const_lv15_7D0 = "11111010000";
const sc_lv<4> nearest_neighbor::ap_const_lv4_A = "1010";
const sc_lv<4> nearest_neighbor::ap_const_lv4_1 = "1";
const sc_lv<6> nearest_neighbor::ap_const_lv6_31 = "110001";
const sc_lv<6> nearest_neighbor::ap_const_lv6_1 = "1";
const sc_lv<49> nearest_neighbor::ap_const_lv49_1FFFFFFFFFFFF = "1111111111111111111111111111111111111111111111111";
const sc_lv<49> nearest_neighbor::ap_const_lv49_1 = "1";

nearest_neighbor::nearest_neighbor(sc_module_name name) : sc_module(name), mVcdFile(0) {
    training_data_U = new nearest_neighbor_training_data("training_data_U");
    training_data_U->clk(ap_clk);
    training_data_U->reset(ap_rst);
    training_data_U->address0(training_data_address0);
    training_data_U->ce0(training_data_ce0);
    training_data_U->q0(training_data_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_160_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond1_fu_160_p2 );

    SC_METHOD(thread_counter_V_1_fu_251_p3);
    sensitive << ( p_1_i_reg_132 );
    sensitive << ( tmp_7_i_fu_227_p2 );
    sensitive << ( counter_V_fu_245_p2 );

    SC_METHOD(thread_counter_V_fu_245_p2);
    sensitive << ( p_1_i_reg_132 );

    SC_METHOD(thread_data_1_fu_166_p2);
    sensitive << ( data_reg_87 );

    SC_METHOD(thread_diff_V_1_fu_239_p2);
    sensitive << ( p_i_reg_123 );
    sensitive << ( tmp_8_i_fu_233_p2 );

    SC_METHOD(thread_difference_V_fu_262_p1);
    sensitive << ( p_1_i_reg_132 );

    SC_METHOD(thread_exitcond1_fu_160_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( data_reg_87 );

    SC_METHOD(thread_exitcond_fu_178_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( val_assign_reg_99 );

    SC_METHOD(thread_exitcond_i_fu_215_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( i_i_reg_143 );

    SC_METHOD(thread_i_fu_221_p2);
    sensitive << ( i_i_reg_143 );

    SC_METHOD(thread_max_difference_V_fu_266_p1);
    sensitive << ( difference_V_fu_262_p1 );

    SC_METHOD(thread_nearest_V);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_i_fu_215_p2 );
    sensitive << ( val_assign_reg_99 );
    sensitive << ( tmp_4_fu_270_p2 );

    SC_METHOD(thread_nearest_V_ap_vld);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_i_fu_215_p2 );
    sensitive << ( tmp_4_fu_270_p2 );

    SC_METHOD(thread_next_mul_fu_172_p2);
    sensitive << ( phi_mul_reg_112 );

    SC_METHOD(thread_possible_result_fu_184_p2);
    sensitive << ( val_assign_reg_99 );

    SC_METHOD(thread_r_V_fu_209_p2);
    sensitive << ( input_V );
    sensitive << ( rhs_V_cast_fu_205_p1 );

    SC_METHOD(thread_rhs_V_cast_fu_205_p1);
    sensitive << ( training_data_q0 );

    SC_METHOD(thread_tmp_4_fu_270_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_i_fu_215_p2 );
    sensitive << ( max_difference_V_1_fu_58 );
    sensitive << ( max_difference_V_fu_266_p1 );

    SC_METHOD(thread_tmp_7_i_fu_227_p2);
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_i_fu_215_p2 );
    sensitive << ( p_i_reg_123 );

    SC_METHOD(thread_tmp_8_i_fu_233_p2);
    sensitive << ( p_i_reg_123 );

    SC_METHOD(thread_tmp_fu_200_p1);
    sensitive << ( training_data_addr2_fu_194_p2 );

    SC_METHOD(thread_tmp_trn_cast_fu_190_p1);
    sensitive << ( data_reg_87 );

    SC_METHOD(thread_training_data_addr2_fu_194_p2);
    sensitive << ( phi_mul_reg_112 );
    sensitive << ( tmp_trn_cast_fu_190_p1 );

    SC_METHOD(thread_training_data_address0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_fu_200_p1 );

    SC_METHOD(thread_training_data_ce0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( exitcond_fu_178_p2 );
    sensitive << ( exitcond_i_fu_215_p2 );
    sensitive << ( exitcond1_fu_160_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "nearest_neighbor_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_V, "(port)input_V");
    sc_trace(mVcdFile, nearest_V, "(port)nearest_V");
    sc_trace(mVcdFile, nearest_V_ap_vld, "(port)nearest_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, training_data_address0, "training_data_address0");
    sc_trace(mVcdFile, training_data_ce0, "training_data_ce0");
    sc_trace(mVcdFile, training_data_q0, "training_data_q0");
    sc_trace(mVcdFile, data_1_fu_166_p2, "data_1_fu_166_p2");
    sc_trace(mVcdFile, data_1_reg_291, "data_1_reg_291");
    sc_trace(mVcdFile, next_mul_fu_172_p2, "next_mul_fu_172_p2");
    sc_trace(mVcdFile, next_mul_reg_296, "next_mul_reg_296");
    sc_trace(mVcdFile, possible_result_fu_184_p2, "possible_result_fu_184_p2");
    sc_trace(mVcdFile, possible_result_reg_304, "possible_result_reg_304");
    sc_trace(mVcdFile, exitcond_fu_178_p2, "exitcond_fu_178_p2");
    sc_trace(mVcdFile, r_V_fu_209_p2, "r_V_fu_209_p2");
    sc_trace(mVcdFile, i_fu_221_p2, "i_fu_221_p2");
    sc_trace(mVcdFile, diff_V_1_fu_239_p2, "diff_V_1_fu_239_p2");
    sc_trace(mVcdFile, exitcond_i_fu_215_p2, "exitcond_i_fu_215_p2");
    sc_trace(mVcdFile, counter_V_1_fu_251_p3, "counter_V_1_fu_251_p3");
    sc_trace(mVcdFile, data_reg_87, "data_reg_87");
    sc_trace(mVcdFile, val_assign_reg_99, "val_assign_reg_99");
    sc_trace(mVcdFile, exitcond1_fu_160_p2, "exitcond1_fu_160_p2");
    sc_trace(mVcdFile, phi_mul_reg_112, "phi_mul_reg_112");
    sc_trace(mVcdFile, p_i_reg_123, "p_i_reg_123");
    sc_trace(mVcdFile, p_1_i_reg_132, "p_1_i_reg_132");
    sc_trace(mVcdFile, i_i_reg_143, "i_i_reg_143");
    sc_trace(mVcdFile, tmp_fu_200_p1, "tmp_fu_200_p1");
    sc_trace(mVcdFile, max_difference_V_1_fu_58, "max_difference_V_1_fu_58");
    sc_trace(mVcdFile, max_difference_V_fu_266_p1, "max_difference_V_fu_266_p1");
    sc_trace(mVcdFile, tmp_4_fu_270_p2, "tmp_4_fu_270_p2");
    sc_trace(mVcdFile, tmp_trn_cast_fu_190_p1, "tmp_trn_cast_fu_190_p1");
    sc_trace(mVcdFile, training_data_addr2_fu_194_p2, "training_data_addr2_fu_194_p2");
    sc_trace(mVcdFile, rhs_V_cast_fu_205_p1, "rhs_V_cast_fu_205_p1");
    sc_trace(mVcdFile, tmp_8_i_fu_233_p2, "tmp_8_i_fu_233_p2");
    sc_trace(mVcdFile, tmp_7_i_fu_227_p2, "tmp_7_i_fu_227_p2");
    sc_trace(mVcdFile, counter_V_fu_245_p2, "counter_V_fu_245_p2");
    sc_trace(mVcdFile, difference_V_fu_262_p1, "difference_V_fu_262_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("nearest_neighbor.hdltvin.dat");
    mHdltvoutHandle.open("nearest_neighbor.hdltvout.dat");
}

nearest_neighbor::~nearest_neighbor() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete training_data_U;
}

void nearest_neighbor::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,3,3>(ap_ST_st3_fsm_2, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(exitcond_fu_178_p2.read(), ap_const_lv1_0))) {
        data_reg_87 = data_1_reg_291.read();
    } else if ((esl_seteq<1,3,3>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        data_reg_87 = ap_const_lv11_0;
    }
    if ((esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_215_p2.read()))) {
        i_i_reg_143 = i_fu_221_p2.read();
    } else if (esl_seteq<1,3,3>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
        i_i_reg_143 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_215_p2.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_fu_270_p2.read()))) {
        max_difference_V_1_fu_58 = max_difference_V_fu_266_p1.read();
    } else if ((esl_seteq<1,3,3>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        max_difference_V_1_fu_58 = ap_const_lv49_7D0;
    }
    if ((esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_215_p2.read()))) {
        p_1_i_reg_132 = counter_V_1_fu_251_p3.read();
    } else if (esl_seteq<1,3,3>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
        p_1_i_reg_132 = ap_const_lv49_0;
    }
    if ((esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_215_p2.read()))) {
        p_i_reg_123 = diff_V_1_fu_239_p2.read();
    } else if (esl_seteq<1,3,3>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
        p_i_reg_123 = r_V_fu_209_p2.read();
    }
    if ((esl_seteq<1,3,3>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_160_p2.read()))) {
        phi_mul_reg_112 = ap_const_lv15_0;
    } else if ((esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_215_p2.read()))) {
        phi_mul_reg_112 = next_mul_reg_296.read();
    }
    if ((esl_seteq<1,3,3>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_160_p2.read()))) {
        val_assign_reg_99 = ap_const_lv4_0;
    } else if ((esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read()) && 
                !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_215_p2.read()))) {
        val_assign_reg_99 = possible_result_reg_304.read();
    }
    if (esl_seteq<1,3,3>(ap_ST_st2_fsm_1, ap_CS_fsm.read())) {
        data_1_reg_291 = data_1_fu_166_p2.read();
    }
    if (esl_seteq<1,3,3>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) {
        next_mul_reg_296 = next_mul_fu_172_p2.read();
        possible_result_reg_304 = possible_result_fu_184_p2.read();
    }
}

void nearest_neighbor::thread_ap_done() {
    if ((esl_seteq<1,3,3>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_160_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void nearest_neighbor::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,3,3>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void nearest_neighbor::thread_ap_ready() {
    if ((esl_seteq<1,3,3>(ap_ST_st2_fsm_1, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_160_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void nearest_neighbor::thread_counter_V_1_fu_251_p3() {
    counter_V_1_fu_251_p3 = (!tmp_7_i_fu_227_p2.read()[0].is_01())? sc_lv<49>(): ((tmp_7_i_fu_227_p2.read()[0].to_bool())? p_1_i_reg_132.read(): counter_V_fu_245_p2.read());
}

void nearest_neighbor::thread_counter_V_fu_245_p2() {
    counter_V_fu_245_p2 = (!p_1_i_reg_132.read().is_01() || !ap_const_lv49_1.is_01())? sc_lv<49>(): (sc_bigint<49>(p_1_i_reg_132.read()) + sc_biguint<49>(ap_const_lv49_1));
}

void nearest_neighbor::thread_data_1_fu_166_p2() {
    data_1_fu_166_p2 = (!data_reg_87.read().is_01() || !ap_const_lv11_1.is_01())? sc_lv<11>(): (sc_bigint<11>(data_reg_87.read()) + sc_biguint<11>(ap_const_lv11_1));
}

void nearest_neighbor::thread_diff_V_1_fu_239_p2() {
    diff_V_1_fu_239_p2 = (tmp_8_i_fu_233_p2.read() & p_i_reg_123.read());
}

void nearest_neighbor::thread_difference_V_fu_262_p1() {
    difference_V_fu_262_p1 = p_1_i_reg_132.read().range(6-1, 0);
}

void nearest_neighbor::thread_exitcond1_fu_160_p2() {
    exitcond1_fu_160_p2 = (!data_reg_87.read().is_01() || !ap_const_lv11_7D0.is_01())? sc_lv<1>(): sc_lv<1>(data_reg_87.read() == ap_const_lv11_7D0);
}

void nearest_neighbor::thread_exitcond_fu_178_p2() {
    exitcond_fu_178_p2 = (!val_assign_reg_99.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(val_assign_reg_99.read() == ap_const_lv4_A);
}

void nearest_neighbor::thread_exitcond_i_fu_215_p2() {
    exitcond_i_fu_215_p2 = (!i_i_reg_143.read().is_01() || !ap_const_lv6_31.is_01())? sc_lv<1>(): sc_lv<1>(i_i_reg_143.read() == ap_const_lv6_31);
}

void nearest_neighbor::thread_i_fu_221_p2() {
    i_fu_221_p2 = (!i_i_reg_143.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_bigint<6>(i_i_reg_143.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void nearest_neighbor::thread_max_difference_V_fu_266_p1() {
    max_difference_V_fu_266_p1 = esl_zext<49,6>(difference_V_fu_262_p1.read());
}

void nearest_neighbor::thread_nearest_V() {
    nearest_V = val_assign_reg_99.read();
}

void nearest_neighbor::thread_nearest_V_ap_vld() {
    if ((esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_215_p2.read()) && 
         !esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_fu_270_p2.read()))) {
        nearest_V_ap_vld = ap_const_logic_1;
    } else {
        nearest_V_ap_vld = ap_const_logic_0;
    }
}

void nearest_neighbor::thread_next_mul_fu_172_p2() {
    next_mul_fu_172_p2 = (!phi_mul_reg_112.read().is_01() || !ap_const_lv15_7D0.is_01())? sc_lv<15>(): (sc_bigint<15>(phi_mul_reg_112.read()) + sc_biguint<15>(ap_const_lv15_7D0));
}

void nearest_neighbor::thread_possible_result_fu_184_p2() {
    possible_result_fu_184_p2 = (!val_assign_reg_99.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_bigint<4>(val_assign_reg_99.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void nearest_neighbor::thread_r_V_fu_209_p2() {
    r_V_fu_209_p2 = (rhs_V_cast_fu_205_p1.read() ^ input_V.read());
}

void nearest_neighbor::thread_rhs_V_cast_fu_205_p1() {
    rhs_V_cast_fu_205_p1 = esl_zext<49,48>(training_data_q0.read());
}

void nearest_neighbor::thread_tmp_4_fu_270_p2() {
    tmp_4_fu_270_p2 = (!max_difference_V_fu_266_p1.read().is_01() || !max_difference_V_1_fu_58.read().is_01())? sc_lv<1>(): (sc_biguint<49>(max_difference_V_fu_266_p1.read()) < sc_biguint<49>(max_difference_V_1_fu_58.read()));
}

void nearest_neighbor::thread_tmp_7_i_fu_227_p2() {
    tmp_7_i_fu_227_p2 = (!p_i_reg_123.read().is_01() || !ap_const_lv49_0.is_01())? sc_lv<1>(): sc_lv<1>(p_i_reg_123.read() == ap_const_lv49_0);
}

void nearest_neighbor::thread_tmp_8_i_fu_233_p2() {
    tmp_8_i_fu_233_p2 = (!p_i_reg_123.read().is_01() || !ap_const_lv49_1FFFFFFFFFFFF.is_01())? sc_lv<49>(): (sc_bigint<49>(p_i_reg_123.read()) + sc_biguint<49>(ap_const_lv49_1FFFFFFFFFFFF));
}

void nearest_neighbor::thread_tmp_fu_200_p1() {
    tmp_fu_200_p1 = esl_zext<64,15>(training_data_addr2_fu_194_p2.read());
}

void nearest_neighbor::thread_tmp_trn_cast_fu_190_p1() {
    tmp_trn_cast_fu_190_p1 = esl_zext<15,11>(data_reg_87.read());
}

void nearest_neighbor::thread_training_data_addr2_fu_194_p2() {
    training_data_addr2_fu_194_p2 = (!phi_mul_reg_112.read().is_01() || !tmp_trn_cast_fu_190_p1.read().is_01())? sc_lv<15>(): (sc_bigint<15>(phi_mul_reg_112.read()) + sc_biguint<15>(tmp_trn_cast_fu_190_p1.read()));
}

void nearest_neighbor::thread_training_data_address0() {
    training_data_address0 =  (sc_lv<15>) (tmp_fu_200_p1.read());
}

void nearest_neighbor::thread_training_data_ce0() {
    if (esl_seteq<1,3,3>(ap_ST_st3_fsm_2, ap_CS_fsm.read())) {
        training_data_ce0 = ap_const_logic_1;
    } else {
        training_data_ce0 = ap_const_logic_0;
    }
}

void nearest_neighbor::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 0 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_160_p2.read())) {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            } else {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            }
            break;
        case 2 : 
            if (esl_seteq<1,1,1>(exitcond_fu_178_p2.read(), ap_const_lv1_0)) {
                ap_NS_fsm = ap_ST_st4_fsm_3;
            } else {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            }
            break;
        case 3 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_215_p2.read())) {
                ap_NS_fsm = ap_ST_st3_fsm_2;
            } else {
                ap_NS_fsm = ap_ST_st5_fsm_4;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void nearest_neighbor::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_V\" :  \"" << input_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"nearest_V\" :  \"" << nearest_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"nearest_V_ap_vld\" :  \"" << nearest_V_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

