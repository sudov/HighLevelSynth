// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _nearest_neighbor_HH_
#define _nearest_neighbor_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "nearest_neighbor_training_data.h"

namespace ap_rtl {

struct nearest_neighbor : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<49> > input_V;
    sc_out< sc_lv<4> > nearest_V;
    sc_out< sc_logic > nearest_V_ap_vld;


    // Module declarations
    nearest_neighbor(sc_module_name name);
    SC_HAS_PROCESS(nearest_neighbor);

    ~nearest_neighbor();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    nearest_neighbor_training_data* training_data_U;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_lv<15> > training_data_address0;
    sc_signal< sc_logic > training_data_ce0;
    sc_signal< sc_lv<48> > training_data_q0;
    sc_signal< sc_lv<11> > data_1_fu_166_p2;
    sc_signal< sc_lv<11> > data_1_reg_291;
    sc_signal< sc_lv<15> > next_mul_fu_172_p2;
    sc_signal< sc_lv<15> > next_mul_reg_296;
    sc_signal< sc_lv<4> > possible_result_fu_184_p2;
    sc_signal< sc_lv<4> > possible_result_reg_304;
    sc_signal< sc_lv<1> > exitcond_fu_178_p2;
    sc_signal< sc_lv<49> > r_V_fu_209_p2;
    sc_signal< sc_lv<6> > i_fu_221_p2;
    sc_signal< sc_lv<49> > diff_V_1_fu_239_p2;
    sc_signal< sc_lv<1> > exitcond_i_fu_215_p2;
    sc_signal< sc_lv<49> > counter_V_1_fu_251_p3;
    sc_signal< sc_lv<11> > data_reg_87;
    sc_signal< sc_lv<4> > val_assign_reg_99;
    sc_signal< sc_lv<1> > exitcond1_fu_160_p2;
    sc_signal< sc_lv<15> > phi_mul_reg_112;
    sc_signal< sc_lv<49> > p_i_reg_123;
    sc_signal< sc_lv<49> > p_1_i_reg_132;
    sc_signal< sc_lv<6> > i_i_reg_143;
    sc_signal< sc_lv<64> > tmp_fu_200_p1;
    sc_signal< sc_lv<49> > max_difference_V_1_fu_58;
    sc_signal< sc_lv<49> > max_difference_V_fu_266_p1;
    sc_signal< sc_lv<1> > tmp_4_fu_270_p2;
    sc_signal< sc_lv<15> > tmp_trn_cast_fu_190_p1;
    sc_signal< sc_lv<15> > training_data_addr2_fu_194_p2;
    sc_signal< sc_lv<49> > rhs_V_cast_fu_205_p1;
    sc_signal< sc_lv<49> > tmp_8_i_fu_233_p2;
    sc_signal< sc_lv<1> > tmp_7_i_fu_227_p2;
    sc_signal< sc_lv<49> > counter_V_fu_245_p2;
    sc_signal< sc_lv<6> > difference_V_fu_262_p1;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_st1_fsm_0;
    static const sc_lv<3> ap_ST_st2_fsm_1;
    static const sc_lv<3> ap_ST_st3_fsm_2;
    static const sc_lv<3> ap_ST_st4_fsm_3;
    static const sc_lv<3> ap_ST_st5_fsm_4;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<15> ap_const_lv15_0;
    static const sc_lv<49> ap_const_lv49_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<49> ap_const_lv49_7D0;
    static const sc_lv<11> ap_const_lv11_7D0;
    static const sc_lv<11> ap_const_lv11_1;
    static const sc_lv<15> ap_const_lv15_7D0;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<6> ap_const_lv6_31;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<49> ap_const_lv49_1FFFFFFFFFFFF;
    static const sc_lv<49> ap_const_lv49_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_counter_V_1_fu_251_p3();
    void thread_counter_V_fu_245_p2();
    void thread_data_1_fu_166_p2();
    void thread_diff_V_1_fu_239_p2();
    void thread_difference_V_fu_262_p1();
    void thread_exitcond1_fu_160_p2();
    void thread_exitcond_fu_178_p2();
    void thread_exitcond_i_fu_215_p2();
    void thread_i_fu_221_p2();
    void thread_max_difference_V_fu_266_p1();
    void thread_nearest_V();
    void thread_nearest_V_ap_vld();
    void thread_next_mul_fu_172_p2();
    void thread_possible_result_fu_184_p2();
    void thread_r_V_fu_209_p2();
    void thread_rhs_V_cast_fu_205_p1();
    void thread_tmp_4_fu_270_p2();
    void thread_tmp_7_i_fu_227_p2();
    void thread_tmp_8_i_fu_233_p2();
    void thread_tmp_fu_200_p1();
    void thread_tmp_trn_cast_fu_190_p1();
    void thread_training_data_addr2_fu_194_p2();
    void thread_training_data_address0();
    void thread_training_data_ce0();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
